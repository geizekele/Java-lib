package br.com.web.na.vai;

public class Lib {

	//CONSTRUTOR PRIVADO
	private Lib() {
		throw new UnsupportedOperationException("ESTA CLASSE NAO PODE SER INSTANCIADA!");
	}

	//OPERACAO SOMA
	public static double soma(double... numeros) {
		double resultado = 0;
		for (double numero : numeros) {
			resultado += numero;
		}
		return resultado; //RETORNO
	}

	//OPERACAO SUBTRACAO
	public static double subtracao(double... numeros) {
        if (numeros.length < 2) {
            throw new IllegalArgumentException("NECESSARIO PELO MENOS 2 NUMEROS!");
        }
        double resultado = 0;   
    	for (double numero : numeros) {
    		resultado += numero;
    	}    
		return resultado;
	}
	
	//OPERACAO MULTIPLICACAO
	public static double multiplicacao(double... numeros) {
        if (numeros.length < 2) {
            throw new IllegalArgumentException("NECESSARIO PELO MENOS 2 NUMEROS!");
        }
        double resultado = 1;
    	for (double numero : numeros) {
    		resultado += numero;
    	}    
		return resultado;
	}

	//OPERACAO DIVISAO
	public static double divisao(double... numeros) {
        if (numeros.length < 2) {
            throw new IllegalArgumentException("NECESSARIO PELO MENOS 2 NUMEROS!");
        }
        double resultado = 0;
        for (int i = 1; i < numeros.length; i++) {
            if (numeros[i] == 0) {
                throw new IllegalArgumentException("NÃ£o pode dividir por zero.");
            }
            resultado /= numeros[i];
        }

        return resultado;
    }

	//CALCULO DE AREA (CIRCULO)
	public static double calcularArea(double raio) {
		return Math.PI * raio * raio;
	}

	//CALCULO PERIMETRO (RETANGULO)
	public static double calcularPerimetro(double lado1, double lado2) {
		return 2 * (lado1 + lado2);
	}

	// CALCULO VOLUME (CUBO)
	public static double calcularVolume(double lado) {
		return Math.pow(lado, 3);
	}

	//JUROS SIMPLES
	@SuppressWarnings("unchecked")
	public static <T extends Number> T jurosSimples(T capital, T taxa, T tempo) {
		return (T) Double.valueOf(capital.doubleValue() * taxa.doubleValue() * tempo.doubleValue());
	}

	//JUROS COMPOSTOS
	@SuppressWarnings("unchecked")
	public static <T extends Number> T jurosCompostos(T capital, T taxa, T tempo) {
		double juros = capital.doubleValue() * Math.pow(1 + taxa.doubleValue(), tempo.doubleValue())
				- capital.doubleValue();
		return (T) Double.valueOf(juros);
	}
}
